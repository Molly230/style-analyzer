"use client";

import { RefreshCw, Download, Share2, Palette, Scissors, Shirt, Sparkles } from 'lucide-react';
import { useState } from 'react';
import VirtualTryOn from './VirtualTryOn';
import ColorSelectionTest from './ColorSelectionTest';

interface StyleResultsProps {
  result: {
    faceShape: string;
    skinTone: string;
    skinUndertone: string;
    confidence?: number;
    originalImage?: string;
    croppedImage?: string;
    colorTestResult?: {
      season: string;
      confidence: number;
      bestColors: string[];
    };
    recommendations: {
      colors: string[];
      patterns: string[];
      necklines: string[];
      hairColors: string[];
      bangs: string[];
      accessories?: string[];
      makeupTips?: string[];
    };
  };
  onRestart: () => void;
}

const FACE_SHAPE_NAMES: Record<string, string> = {
  oval: '椭圆形脸',
  round: '圆形脸',
  square: '方形脸',
  heart: '心形脸',
  long: '长形脸',
  diamond: '钻石形脸',
  triangle: '三角形脸',
  rectangle: '长方形脸'
};

const SKIN_TONE_NAMES: Record<string, string> = {
  cool: '冷色调',
  warm: '暖色调',
  neutral: '中性色调'
};

const PATTERN_NAMES: Record<string, string> = {
  'solid': '纯色',
  'small florals': '小碎花',
  'subtle stripes': '细条纹',
  'geometric': '几何图案',
  'polka dots': '波点',
  'abstract': '抽象图案'
};

const NECKLINE_NAMES: Record<string, string> = {
  'v-neck': 'V领',
  'scoop neck': '圆领',
  'boat neck': '一字领',
  'high neck': '高领',
  'off-shoulder': '一字肩',
  'square neck': '方领'
};

const BANG_NAMES: Record<string, string> = {
  'side-swept': '侧分刘海',
  'curtain bangs': '八字刘海',
  'straight': '齐刘海',
  'wispy': '空气刘海',
  'no bangs': '无刘海'
};

export default function StyleResults({ result, onRestart }: StyleResultsProps) {
  const [activeTab, setActiveTab] = useState<'colors' | 'style' | 'hair' | 'tryOn' | 'colorTest'>('colorTest');
  const [colorTestCompleted, setColorTestCompleted] = useState(false);
  const [personalColorResult, setPersonalColorResult] = useState<{
    season: string;
    confidence: number;
    bestColors: string[];
  } | null>(null);

  const generateReport = () => {
    const report = `
=== 美颜风格分析报告 ===

👤 面部分析结果:
• 脸型: ${FACE_SHAPE_NAMES[result.faceShape]}
• 肤色: ${SKIN_TONE_NAMES[result.skinTone]}色调
• 肤色基调: ${result.skinUndertone}调

🎨 色彩推荐:
${result.recommendations.colors.map(color => `• ${color}`).join('\n')}

👗 穿搭建议:
• 图案: ${result.recommendations.patterns.map(p => PATTERN_NAMES[p] || p).join('、')}
• 领型: ${result.recommendations.necklines.map(n => NECKLINE_NAMES[n] || n).join('、')}

💇‍♀️ 发型建议:
• 发色: ${result.recommendations.hairColors.join('、')}
• 刘海: ${result.recommendations.bangs.map(b => BANG_NAMES[b] || b).join('、')}

Generated by AI Style Analyzer
    `.trim();
    
    return report;
  };

  const shareResults = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: '我的风格分析结果',
          text: generateReport(),
          url: window.location.href
        });
      } catch (error) {
        console.log('分享取消或失败');
      }
    } else {
      navigator.clipboard.writeText(generateReport());
      alert('结果已复制到剪贴板！');
    }
  };

  const downloadReport = () => {
    const report = generateReport();
    const blob = new Blob([report], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = '风格分析报告.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-8">
      {/* 结果标题 */}
      <div className="text-center">
        <h2 className="text-3xl font-bold text-gray-800 mb-2">
          ✨ 你的专属风格报告
        </h2>
        <p className="text-gray-600">
          基于AI分析，为你量身定制的美学建议
        </p>
      </div>

      {/* 基础分析结果 */}
      <div className="grid md:grid-cols-3 gap-6 mb-8">
        <div className="bg-gradient-to-br from-pink-50 to-pink-100 rounded-xl p-6 text-center">
          <div className="text-2xl mb-2">👤</div>
          <h3 className="font-semibold text-gray-800 mb-1">脸型分析</h3>
          <p className="text-pink-600 font-medium">
            {FACE_SHAPE_NAMES[result.faceShape]}
          </p>
        </div>
        
        <div className="bg-gradient-to-br from-purple-50 to-purple-100 rounded-xl p-6 text-center">
          <div className="text-2xl mb-2">🎨</div>
          <h3 className="font-semibold text-gray-800 mb-1">肤色诊断</h3>
          <p className="text-purple-600 font-medium">
            {SKIN_TONE_NAMES[result.skinTone]}
          </p>
        </div>
        
        <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl p-6 text-center">
          <div className="text-2xl mb-2">💫</div>
          <h3 className="font-semibold text-gray-800 mb-1">肤色基调</h3>
          <p className="text-blue-600 font-medium">
            {result.skinUndertone}调
          </p>
        </div>
      </div>

      {/* 标签导航 */}
      <div className="flex justify-center mb-6 px-2">
        <div className="bg-gray-100 rounded-lg p-1 flex overflow-x-auto w-full max-w-2xl">
          {[
            ...(result.croppedImage && !colorTestCompleted ? [{ id: 'colorTest', label: '色彩测试', icon: Palette }] : []),
            { id: 'colors', label: '色彩搭配', icon: Palette },
            { id: 'style', label: '服装风格', icon: Shirt },
            { id: 'hair', label: '发型建议', icon: Scissors },
            ...(result.originalImage ? [{ id: 'tryOn', label: '虚拟试妆', icon: Sparkles }] : [])
          ].map((tab) => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id as 'colors' | 'style' | 'hair' | 'tryOn' | 'colorTest')}
                className={`
                  flex items-center gap-1 sm:gap-2 px-3 sm:px-6 py-2 sm:py-3 rounded-md font-medium transition-all whitespace-nowrap text-sm sm:text-base flex-shrink-0
                  ${activeTab === tab.id
                    ? 'bg-white text-pink-600 shadow-sm'
                    : 'text-gray-600 hover:text-gray-800'
                  }
                `}
              >
                <Icon size={16} className="sm:w-5 sm:h-5" />
                <span className="hidden sm:inline">{tab.label}</span>
                <span className="sm:hidden">{tab.label.split('')[0]}</span>
              </button>
            );
          })}
        </div>
      </div>

      {/* 详细推荐内容 */}
      <div className="bg-white rounded-xl border border-gray-200 p-4 sm:p-8">
        {activeTab === 'colorTest' && result.croppedImage && (
          <ColorSelectionTest
            croppedImage={result.croppedImage}
            onComplete={(selectedColors, recommendation) => {
              setPersonalColorResult({ selectedColors, recommendation });
              setColorTestCompleted(true);
              setActiveTab('colors');
            }}
          />
        )}

        {activeTab === 'colors' && (
          <div>
            <h3 className="text-xl font-semibold text-gray-800 mb-6 flex items-center gap-2">
              <Palette className="text-pink-500" size={24} />
              专属色彩搭配
            </h3>
            
            <div className="space-y-6">
              {/* 显示个人色彩测试结果 */}
              {personalColorResult && (
                <div className="bg-gradient-to-r from-pink-50 to-purple-50 rounded-lg p-6 mb-6">
                  <h4 className="font-semibold text-gray-800 mb-4 flex items-center gap-2">
                    🎨 基于你的个人偏好分析
                  </h4>
                  <div className="grid md:grid-cols-2 gap-6">
                    <div>
                      <p className="text-sm text-gray-600 mb-3">
                        色调偏好分析：
                      </p>
                      <div className="space-y-2">
                        <div className="flex items-center justify-between">
                          <span className="text-sm">暖色调</span>
                          <div className="flex items-center gap-2">
                            <div className="w-24 bg-gray-200 rounded-full h-2">
                              <div 
                                className="bg-orange-400 h-2 rounded-full"
                                style={{ width: `${personalColorResult.recommendation.categoryPercentages.warm}%` }}
                              />
                            </div>
                            <span className="text-xs text-gray-600">
                              {personalColorResult.recommendation.categoryPercentages.warm}%
                            </span>
                          </div>
                        </div>
                        <div className="flex items-center justify-between">
                          <span className="text-sm">冷色调</span>
                          <div className="flex items-center gap-2">
                            <div className="w-24 bg-gray-200 rounded-full h-2">
                              <div 
                                className="bg-blue-400 h-2 rounded-full"
                                style={{ width: `${personalColorResult.recommendation.categoryPercentages.cool}%` }}
                              />
                            </div>
                            <span className="text-xs text-gray-600">
                              {personalColorResult.recommendation.categoryPercentages.cool}%
                            </span>
                          </div>
                        </div>
                        <div className="flex items-center justify-between">
                          <span className="text-sm">中性色调</span>
                          <div className="flex items-center gap-2">
                            <div className="w-24 bg-gray-200 rounded-full h-2">
                              <div 
                                className="bg-gray-400 h-2 rounded-full"
                                style={{ width: `${personalColorResult.recommendation.categoryPercentages.neutral}%` }}
                              />
                            </div>
                            <span className="text-xs text-gray-600">
                              {personalColorResult.recommendation.categoryPercentages.neutral}%
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div>
                      <p className="text-sm text-gray-600 mb-3">你最喜欢的颜色：</p>
                      <div className="flex flex-wrap gap-2">
                        {personalColorResult.selectedColors.slice(0, 6).map((color: { color: string; name: string; count: number }, index: number) => (
                          <div key={index} className="flex items-center gap-1">
                            <div 
                              className="w-6 h-6 rounded-full border border-gray-300"
                              style={{ backgroundColor: color.color }}
                            />
                            <span className="text-xs bg-pink-100 text-pink-700 px-2 py-1 rounded-full">
                              {color.count}
                            </span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              )}

              <div>
                <h4 className="font-medium text-gray-700 mb-4">
                  {personalColorResult ? '根据你的偏好推荐' : '基础色彩推荐'}
                </h4>
                <div className="grid grid-cols-2 sm:grid-cols-4 gap-3 sm:gap-4">
                  {(personalColorResult 
                    ? personalColorResult.recommendation.recommendedColors 
                    : result.recommendations.colors
                  ).map((color: string, index: number) => (
                    <div key={index} className="text-center">
                      <div
                        className="w-12 h-12 sm:w-16 sm:h-16 mx-auto rounded-lg shadow-md border border-gray-200 mb-2"
                        style={{ backgroundColor: typeof color === 'string' ? color : color.color }}
                      />
                      <p className="text-xs sm:text-sm text-gray-600">
                        {typeof color === 'string' ? color : color.name}
                      </p>
                    </div>
                  ))}
                </div>
              </div>
              
              <div>
                <h4 className="font-medium text-gray-700 mb-3">推荐图案</h4>
                <div className="flex flex-wrap gap-2">
                  {result.recommendations.patterns.map((pattern, index) => (
                    <span
                      key={index}
                      className="bg-pink-50 text-pink-700 px-4 py-2 rounded-full text-sm font-medium"
                    >
                      {PATTERN_NAMES[pattern] || pattern}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'style' && (
          <div>
            <h3 className="text-xl font-semibold text-gray-800 mb-6 flex items-center gap-2">
              <Shirt className="text-purple-500" size={24} />
              服装风格建议
            </h3>
            
            <div className="space-y-6">
              <div>
                <h4 className="font-medium text-gray-700 mb-3">最佳领型选择</h4>
                <div className="grid md:grid-cols-2 gap-4">
                  {result.recommendations.necklines.map((neckline, index) => (
                    <div key={index} className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                      <h5 className="font-medium text-purple-800 mb-1">
                        {NECKLINE_NAMES[neckline] || neckline}
                      </h5>
                      <p className="text-purple-600 text-sm">
                        适合你的脸型，能很好地修饰面部轮廓
                      </p>
                    </div>
                  ))}
                </div>
              </div>
              
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <h4 className="font-medium text-blue-800 mb-2">💡 搭配小贴士</h4>
                <ul className="text-blue-700 text-sm space-y-1">
                  <li>• 根据你的{FACE_SHAPE_NAMES[result.faceShape]}特征，避免过于紧贴的高领设计</li>
                  <li>• {SKIN_TONE_NAMES[result.skinTone]}的肌肤适合选择相应色温的配饰</li>
                  <li>• 可以尝试叠搭来丰富整体造型的层次感</li>
                </ul>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'hair' && (
          <div>
            <h3 className="text-xl font-semibold text-gray-800 mb-6 flex items-center gap-2">
              <Scissors className="text-green-500" size={24} />
              发型造型建议
            </h3>
            
            <div className="space-y-6">
              <div>
                <h4 className="font-medium text-gray-700 mb-4">推荐发色</h4>
                <div className="grid grid-cols-3 gap-4">
                  {result.recommendations.hairColors.map((color, index) => (
                    <div key={index} className="text-center">
                      <div
                        className="w-12 h-12 mx-auto rounded-full shadow-md border border-gray-200 mb-2"
                        style={{ backgroundColor: color }}
                      />
                      <p className="text-sm text-gray-600">{color}</p>
                    </div>
                  ))}
                </div>
              </div>
              
              <div>
                <h4 className="font-medium text-gray-700 mb-3">刘海建议</h4>
                <div className="space-y-3">
                  {result.recommendations.bangs.map((bang, index) => (
                    <div key={index} className="bg-green-50 border border-green-200 rounded-lg p-4">
                      <h5 className="font-medium text-green-800 mb-1">
                        {BANG_NAMES[bang] || bang}
                      </h5>
                      <p className="text-green-600 text-sm">
                        能够很好地平衡你的面部比例，凸显优势
                      </p>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'tryOn' && result.originalImage && (
          <VirtualTryOn
            originalImage={result.originalImage}
            recommendations={{
              colors: result.recommendations.colors,
              hairColors: result.recommendations.hairColors,
              bangs: result.recommendations.bangs
            }}
          />
        )}
      </div>

      {/* 操作按钮 */}
      <div className="flex flex-wrap justify-center gap-4">
        <button
          onClick={shareResults}
          className="bg-blue-500 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-600 transition-colors flex items-center gap-2"
        >
          <Share2 size={18} />
          分享结果
        </button>
        
        <button
          onClick={downloadReport}
          className="bg-green-500 text-white px-6 py-3 rounded-lg font-medium hover:bg-green-600 transition-colors flex items-center gap-2"
        >
          <Download size={18} />
          下载报告
        </button>
        
        <button
          onClick={onRestart}
          className="bg-gray-500 text-white px-6 py-3 rounded-lg font-medium hover:bg-gray-600 transition-colors flex items-center gap-2"
        >
          <RefreshCw size={18} />
          重新分析
        </button>
      </div>

      {/* 免责声明 */}
      <div className="text-center text-xs text-gray-500 border-t pt-4">
        * 本分析结果仅供参考，个人风格因人而异，建议结合实际情况进行调整
      </div>
    </div>
  );
}